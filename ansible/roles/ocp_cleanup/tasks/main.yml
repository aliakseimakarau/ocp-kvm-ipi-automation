---

- name: cleanup vbmc assets
  block:
    - name: stop any existing vbmc and vbmcd processes
      ansible.builtin.shell: killall vbmc; killall vbmcd; true

    - name: remove any existing vbmc state files
      ansible.builtin.file:
        path: ~root/.vbmc
        state: absent

    - name: delete the dummy network interface
      when: ipmi_dummy_network is inlist(ansible_interfaces)
      ansible.builtin.command:
        cmd: '{{ item }}'
      loop:
        - 'ip addr flush dev {{ ipmi_dummy_network }}'
        - 'ip link delete {{ ipmi_dummy_network }}'

- name: check if working directory exists
  ansible.builtin.stat:
    path: '{{ openshift_installer_workdir }}'
  register: workdir_info

- name: check if cluster installation log file exists
  when: workdir_info.stat.exists and workdir_info.stat.isdir
  ansible.builtin.stat:
    path: '{{ openshift_installer_workdir }}/.openshift_install_state.json'
  register: install_log_info

- name: check if cluster installation kubeconfig file exists
  when: workdir_info.stat.exists and workdir_info.stat.isdir
  ansible.builtin.stat:
    path: '{{ openshift_installer_workdir }}/auth/kubeconfig'
  register: install_kubeconfig_info

- name: check if openshift-install binary exists
  ansible.builtin.stat:
    path: /usr/local/bin/openshift-install
  register: openshift_install_info

- name: determine name of existing cluster from installation log
  when: workdir_info.stat.exists and workdir_info.stat.isdir and install_log_info.stat.exists
  ansible.builtin.include_tasks: '{{ inventory_dir }}/tasks/get_cluster_name.yml'

- name: determine UID of existing cluster
  when:
    - workdir_info.stat.exists
    - workdir_info.stat.isdir
    - install_kubeconfig_info.stat.exists
  ansible.builtin.include_tasks: '{{ inventory_dir }}/tasks/get_cluster_uid.yml'

- name: destroy any existing cluster
  when: workdir_info.stat.exists and workdir_info.stat.isdir and openshift_install_info.stat.exists
  ansible.builtin.command:
    cmd: '/usr/local/bin/openshift-install destroy cluster --dir={{ openshift_installer_workdir }}'
  register: cluster_destroy
  ignore_errors: '{{ cleanup_ignore_errors }}'

- name: remove all stale libvirt cluster resources
  when: cluster_destroy is not skipped and cluster_destroy.rc != 0
  block:
    - name: get list of all existing libvirt domains
      community.libvirt.virt:
        command: list_vms
      register: all_libvirt_domains

    - name: get list of libvirt domains that match previously existing cluster name
      ansible.builtin.set_fact:
        stale_cluster_domains: '{{ all_libvirt_domains.list_vms | select("startswith", cluster_id) | list }}'

    - name: display all remaining stale libvirt domains
      ansible.builtin.debug:
        var: stale_cluster_domains

- name: archive cluster in OCM (if applicable)
  vars:
    external_cluster_id: '{{ cluster_uid }}'
  when:
    - cluster_uid is defined
    - cluster_destroy is not skipped
    - cluster_destroy is success
  ansible.builtin.include_tasks: '{{ role_path }}/tasks/archive_cluster_ocm.yml'

- name: remove all stale files and directories
  block:
    - name: find all OpenShift installer temporary files
      ansible.builtin.find:
        paths: /tmp
        patterns: openshift-install-*
      register: openshift_tmp_files

    - name: delete all temporary files
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      loop: '{{ openshift_tmp_files.files }}'

    - name: delete all non-temporary files
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      loop:
        - ~root/.cache/go-build
        - ~root/.cache/openshift-installer
        - ~root/.kube
        - ~root/.terraform.d
        - ~root/go
        - '{{ openshift_installer_workdir }}'
        - /usr/local/bin/oc
        - /usr/local/bin/opm
        - /usr/local/bin/kubectl
        - /usr/local/bin/openshift-install
        - /usr/local/bin/terraform
        - /usr/local/share/terraform/plugins/local/ibm-cloud/ibm
        - /usr/local/bin/helm
        - /usr/local/bin/butane
        - /usr/local/bin/ocm
        - /etc/bash_completion.d/oc

- name: check if SSH configuration for user root exists
  ansible.builtin.stat:
    path: '~root/.ssh/config'
  register: user_ssh_config_info

- name: cleanup SSH configuration for user root
  when: user_ssh_config_info.stat.exists
  ansible.builtin.blockinfile:
    path: '~root/.ssh/config'
    state: absent

- name: clean up /etc/hosts
  ansible.builtin.blockinfile:
    path: /etc/hosts
    marker: '{{ item }}'
    state: absent
  loop:
    - '{{ libvirt_marker }}'
    - '{{ host_marker }}'

- name: clean up /etc/haproxy/haproxy.cfg
  ansible.builtin.blockinfile:
    path: /etc/haproxy/haproxy.cfg
    marker: '{{ item.marker | default(omit) }}'
    block: '{{ item.block }}'
  loop:
    - { 'block': '' }
    - { 'marker': '{{ host_marker }}', 'block': '' }

- name: clean up resolv.conf
  block:
    - name: determine location of resolv.conf file
      ansible.builtin.include_tasks: '{{ inventory_dir }}/tasks/get_resolv_conf_location.yml'

    - name: remove immutability attribute from resolv.conf file
      ansible.builtin.command:
        cmd: 'chattr -i {{ resolv_conf_location }}'

    - name: check if resolv.conf backup file exists
      ansible.builtin.stat:
        path: '{{ resolv_conf_location }}.bkup'
      register: resolv_conf_bkup_info

    - name: restore original resolv.conf from backup file
      when: resolv_conf_bkup_info.stat.exists
      ansible.builtin.copy:
        src: '{{ resolv_conf_location }}.bkup'
        dest: '{{ resolv_conf_location }}'
        owner: root
        group: root
        mode: '0644'
        remote_src: true

    - name: remove resolv.conf backup file
      ansible.builtin.file: # noqa risky-file-permissions
        path: '{{ resolv_conf_location }}.bkup'
        attributes: '-i'
        state: '{{ item }}'
      loop:
        - touch
        - absent
  always:
    - name: add immutability attribute to resolv.conf file
      ansible.builtin.command:
        cmd: 'chattr +i {{ resolv_conf_location }}'

- name: clean up libvirt hooks
  block:
    - name: remove 'qemu' libvirt hook
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      loop:
        - /etc/libvirt/hooks/qemu
  always:
    - name: list all system services
      ansible.builtin.service_facts:

    - name: restart libvirtd service
      when: "'libvirtd' in ansible_facts.services"
      ansible.builtin.service:
        name: libvirtd
        state: reloaded
        enabled: true
